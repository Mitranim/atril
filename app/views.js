System.register(['atril'], function (_export) {
  'use strict';

  var templateCache;
  return {
    setters: [function (_atril) {
      templateCache = _atril.templateCache;
    }],
    execute: function () {
      templateCache.set('app/doc-banner/doc-banner.html', '<h1 class="text-monospace">atril</h1>\n\n<h3>Experimental web UI framework</h3>\n\n<p style="font-size: 1rem">Ideas from ReactJS, Polymer, Angular 2, Aurelia, made simple</p>\n\n<div class="link-section">\n  <a href="https://github.com/Mitranim/atril" target="_blank">\n    <sf-icon class="github-light pop"></sf-icon>\n  </a>\n  <a href="http://mitranim.com/#contacts" target="_blank">\n    <sf-icon class="external-link pop" style="font-size: 0.8em"></sf-icon>\n  </a>\n</div>\n\n');
      templateCache.set('app/doc-index/doc-index.html', '<doc-features>\n  <a href="#elements-and-attributes" class="text-darkorange">\n    <div>Custom elements and attributes</div>\n    <sf-icon svg-icon.="cubes"></sf-icon>\n  </a>\n  <a href="#change-detection" class="text-brown">\n    <div>Automatic change detection</div>\n    <sf-icon svg-icon.="magic"></sf-icon>\n  </a>\n  <a href="#databinding" class="text-darkred">\n    <div>Two-way and one-way databinding</div>\n    <sf-icon svg-icon.="arrows-h"></sf-icon>\n  </a>\n</doc-features>\n<doc-features>\n  <a href="#virtual-dom" class="text-yellow">\n    <div>Fast rendering with the virtual DOM</div>\n    <sf-icon svg-icon.="bolt"></sf-icon>\n  </a>\n  <a href="#mpa" class="text-info">\n    <div>Multi-page application friendly</div>\n    <sf-icon svg-icon.="sitemap"></sf-icon>\n  </a>\n  <a href="#light" class="text-warning">\n    <div>Lightweight (33 KB)</div>\n    <sf-icon svg-icon.="paper-plane-o"></sf-icon>\n  </a>\n</doc-features>\n\n<div class="pad space-out-v yellow">\n  <p>\n    <sf-icon svg-icon.="info-circle" class="inline"></sf-icon>\n    <strong>Note:</strong> this documentation is very much a\n    <strong>work in progress</strong>.\n  </p>\n</div>\n\n<sf-article class="pad">\n  <h1 id="elements-and-attributes">\n    <sf-icon svg-icon.="cubes" class="inline"></sf-icon>\n    Elements and Attributes\n  </h1>\n\n<template markdown.>\nThe framework has three types of building blocks.\n* [`Component`](#component): provides a viewmodel and a view.\n* [`Attribute`](#attribute): operates on the viewmodel and the real DOM.\n* [`Draft`](#draft): mutates a part of the virtual DOM in response to the viewmodel changes.\n\n<p class="info pad">\n  <strong>Note:</strong> this documentation shows features from\n  EcmaScript 6/7, but they\'re <strong>not</strong> required. You can use\n  <code>atril</code> with plain ES5 and any module system. The docs\n  include some ES5 examples as well.\n</p>\n\n## Component\n\nA custom element (usually called _component_) is a combination of a _view model_\n(data and logic) with a _view_ (a template). `atril` renders the view and\nautomatically updates it whenever the data changes. It also supports two-way\ndatabinding.\n\nExample custom element:\n</template>\n\n<div class="code-pair">\n<pre highlight.typescript>\n// Viewmodel.\n\nimport {Component} from \'atril\';\n\n@Component({\n  tagName: \'hello-world\'\n})\nclass ViewModel {\n  name = \'world\';\n  static templateUrl = \'app/hello-world/hello-world.html\';\n}\n</pre>\n\n<pre highlight.html>\n<!-- Template. -->\n\n<div>\n  <!-- Updated automatically -->\n  <h1>Hello, {{name}}!</h1>\n\n  <!-- Two-way databinding -->\n  <input twoway.value="name">\n\n  <!-- One-way databinding and manual update -->\n  <input bind.value="name" on.input="name = this.value">\n</div>\n</pre>\n</div>\n\n<sf-collapse class="info">\n  <input id="es5-example" type="checkbox">\n  <label for="es5-example" class="pad">\n    <sf-icon svg-icon.="question-circle" class="inline text-info"></sf-icon>\n    Click to see example with EcmaScript 5 and CommonJS.\n  </label>\n<div class="code-pair">\n<pre highlight.javascript>\nvar Component = require(\'atril\').Component;\n\nComponent({\n  tagName: \'hello-world\'\n})(ViewModel);\n\nfunction ViewModel() {\n  this.name = \'world\';\n}\n\nViewModel.templateUrl = \'app/hello-world/hello-world.html\';\n</pre>\n\n<pre highlight.html>\n<div>\n  <!-- Updates automatically -->\n  <h1>Hello, {{name}}!</h1>\n\n  <!-- Two-way databinding -->\n  <input twoway.value="name" placeholder="write here">\n\n  <!-- One-way databinding and manual update -->\n  <input bind.value="name" on.input="name = this.value">\n</div>\n</pre>\n</div>\n</sf-collapse>\n\n<div class="pad space-out-v yellow">\n  <p>\n    <sf-icon svg-icon.="info-circle" class="inline text-info"></sf-icon>\n    Demo\n  </p>\n  <hello-world></hello-world>\n</div>\n\n<template markdown.>\n## Attribute\n\nA custom attribute changes how the element behaves in the real DOM.\n\nAttributes are powerful. One- and two-way databinding in `atril` is implemented\nentirely with attributes, with no special treatment from the core engine.\n\nWhen using a custom attribute, you have to "opt in" by adding a dot to the name.\nYou can also add an optional _hint_ after the dot to customise its behaviour.\nMost built-ins support various hints. This makes custom attributes very flexible\nand ensures no conflict with other attributes.\n\nHere\'s an example attribute. This is the entire implementation of the built-in\n`class.*` bindings.\n</template>\n\n<div class="code-pair">\n<pre highlight.typescript>\n@Attribute({attributeName: \'class\'})\nclass Ctrl {\n  // Autoassigned by the framework.\n  // (Compile-time type information in TS.)\n  element: Element;\n  hint: string;\n  expression: Function;\n  scope: any;\n\n  phase() {\n    let result = this.expression(this.scope);\n    if (result) this.element.classList.add(this.hint);\n    else this.element.classList.remove(this.hint);\n  }\n}\n</pre>\n\n<pre highlight.html>\n<!-- Example usage. -->\n<div>\n  <!-- Receives `.info` when `checked` is true\n       and `.error` otherwise. -->\n  <label class.info="checked" class.error="!checked">\n\n    <input twoway.checked="checked" type="checkbox">\n\n    <span>I\'m checked: {{checked}}</span>\n\n  </label>\n</div>\n</pre>\n</div>\n\n<div class="pad space-out-v yellow">\n  <p>\n    <sf-icon svg-icon.="info-circle" class="inline text-info"></sf-icon>\n    Demo\n  </p>\n  <div class="pad-v">\n    <label class="pad" class.info="checked" class.error="!checked">\n      <input twoway.checked="checked" type="checkbox">\n      <span>I\'m checked: {{checked}}</span>\n    </label>\n  </div>\n</div>\n\n<template markdown.>\n## Draft\n\nYou often want to do fiddly things with the DOM, like adding or removing nodes\nin response to the changing viewmodel. `atril` has you covered!\n\n_Drafts_ give you direct access to the [virtual DOM](#virtual-dom). A draft is a\n`template` tag with some initial content that serves as a blueprint. When\n`atril` performs a reflow, the draft controller can modify it in response to the\nchanges in the viewmodel. You can clone or completely remove the nodes, and\nlater add them back. The framework takes care of syncing all that to the real\nDOM with minimal repaints.\n\nThe built-in special attributes `if.` and `for.*` are implemented as drafts.\nHere\'s an example of something custom (see this site\'s source for a more\ncomplete implementation).\n</template>\n\n<div class="code-pair">\n<pre highlight.typescript>\nimport {Draft, templateCache} from \'atril\';\n\n@Draft({\n  attributeName: \'svg-icon\'\n})\nclass Ctrl {\n  // Autoassigned by the framework.\n  element: HTMLElement; // template\n\n  constructor() {\n    let iconName = this.element.getAttribute(\'svg-icon.\');\n    let path = \'app/svg/\' + iconName + \'.svg\';\n    // .content is where the initial content of a template element is stored.\n    let content = this.element.content;\n    this.element.appendChild(content.firstChild);\n    this.element.firstChild.innerHTML = templateCache.get(path) || \'\';\n  }\n}\n</pre>\n\n<pre highlight.html>\n<!-- Default usage -->\n≺template svg-icon.="paper-plane-o"≻\n  <span></span>\n≺/template≻\n\n<!-- Shorthand usage.\n     This gets expanded into the form shown above. -->\n≺span svg-icon.="paper-plane-o"≻≺/span≻\n</pre>\n</div>\n</sf-article>\n\n<sf-article class="pad">\n  <h1 id="change-detection">\n    <sf-icon svg-icon.="magic" class="inline"></sf-icon>\n    Automatic Change Detection\n  </h1>\n<template markdown.>\nMuch like Angular 2, `atril` uses <a href="https://github.com/angular/zone.js"\ntarget="_blank"><code>zone.js</code></a> to automatically detect relevant\nevents. When something happens, the framework reflows the virtual DOM, updating\nit with the new data, and carefully updates the view.\n\nForget about event subscriptions, manual re-renders (ReactJS), digest cycles\n(Angular) or observables (Polymer, Aurelia). In `atril`, it just works.\n\nAs a side benefit, this architecture allows you to bind to _expressions_ rather\nthan just properties. See databinding for details.\n</template>\n</sf-article>\n\n<sf-article class="pad">\n  <h1 id="databinding">\n    <sf-icon svg-icon.="arrows-h" class="inline"></sf-icon>\n    Databinding\n  </h1>\n<template markdown.>\nThe framework has one-way and two-way databinding. They\'re implemented as\ncustom attributes. You can add your own custom binding types in a similar\nfashion.\n\n## `bind.*`\n\nOne-way binding. This is the default. It binds an expression evaluated against\nthe current viewmodel to a property of the target element. If the target element\nhappens to be an `atril` component, and if the component declares this property\nas `@bindable`, it\'s also bound.\n\nTo sync the value in the other direction, use an event handler with the built-in\n`on.*` attribute. Example:\n\n```html\n<!-- Bind a property -->\n<p>My name is: {{name}}</p>\n<input bind.value="name" on.input="name = this.value" placeholder="type name here...">\n\n<!-- Bind to a nested property -->\n<p bind.style.color="color">My color is: {{color}}</p>\n<input bind.value="color" on.input="color = this.value" placeholder="try `blue`">\n```\n</template>\n\n<div class="pad space-out-v yellow">\n  <p>\n    <sf-icon svg-icon.="info-circle" class="inline text-info"></sf-icon>\n    Demo\n  </p>\n  <p>My name is: {{name}}</p>\n  <input bind.value="name" on.input="name = this.value" placeholder="type name here...">\n\n  <p bind.style.color="color">My color is: {{color}}</p>\n  <input bind.value="color" on.input="color = this.value" placeholder="try `blue`">\n</div>\n\n<template markdown.>\n## `twoway.*`\n\nBinds a property of the current viewmodel to a property of the target element.\nJust like `bind.*`, if the target element is an `atril` component (has a\nviewmodel), and if that viewmodel declares the property as `@bindable`, its\nproperty is also bound. Any changes are synced both ways.\n\nExample:\n\n```html\n<!-- Bind a property -->\n<p>My name is: {{name}}</p>\n<input twoway.value="name" placeholder="type name here...">\n\n<!-- Bind a nested property -->\n<p bind.style.color="color">My color is: {{color}}</p>\n<input twoway.value="color" placeholder="try `blue`">\n```\n</template>\n\n<div class="pad space-out-v yellow">\n  <p>\n    <sf-icon svg-icon.="info-circle" class="inline text-info"></sf-icon>\n    Demo\n  </p>\n  <p>My name is: {{name}}</p>\n  <input twoway.value="name" placeholder="type name here...">\n\n  <p bind.style.color="color">My color is: {{color}}</p>\n  <input twoway.value="color" placeholder="try `blue`">\n</div>\n\n<template markdown.>\n## `@bindable`\n\nDeclares a viewmodel property as bindable, so it can be set from the outside\nvia `bind.*` or `twoway.*`.\n\nUsage with ES6/7:\n\n```typescript\nimport {Component, bindable} from \'atril\';\n\n@Component({\n  tagName: \'inner-component\'\n})\nclass ViewModel {\n  @bindable myProperty;\n}\n```\n\nUsage with ES5:\n\n```typescript\nvar Component = require(\'atril\').Component;\n\nComponent({tagName: \'inner-component\'})(ViewModel);\n\nfunction ViewModel() {}\n\nViewModel.bindable = [\'myProperty\'];\n```\n\nThen you can bind that property from the outside:\n\n```html\n<div>\n  <inner-component twoway.my-property="outerProperty"></inner-component>\n</div>\n```\n</template>\n</sf-article>\n\n<sf-article class="pad">\n  <h1 id="virtual-dom">\n    <sf-icon svg-icon.="bolt" class="inline"></sf-icon>\n    Virtual DOM\n  </h1>\n\n<template markdown.>\n`atril` maintains a virtual representation of each component\'s node tree.\nUpdates to the viewmodel cause changes in the virtual tree. The framework\ndiffs them with the live DOM and carefully updates the view.\n\nThis is primarily an implementation detail, and is done for internal\nconsistency. However, this architecture should enable optimisations for high\nrendering performance, similar to ReactJS.\n</template>\n\n  <div class="pad space-out-v error">\n    <p>\n      <sf-icon svg-icon.="exclamation-triangle" class="text-warning inline"></sf-icon>\n      <strong>Note:</strong> this is very much a 0.0.1 release in terms of\n      performance. The current implementation of the DOM is naive and incurs a\n      penalty for continuous updates. Optimisations are underway.\n    </p>\n  </div>\n</sf-article>\n\n<sf-article class="pad">\n  <h1 id="mpa">\n    <sf-icon svg-icon.="sitemap" class="inline"></sf-icon>\n    Multi-page Application Friendly\n  </h1>\n<template markdown.>\n`atril` is a tool for doing cool things on _existing_ sites.\n\nBig-name next generation frameworks put so much focus on clientside routing and\nsingle-page applications that it becomes detrimental. They penalise multi-page\napplications (normal websites) in multiple ways:\n\n* By making it difficult to include multiple components all over the page\n  (Angular 2, Aurelia, ReactJS). You\'re expected to root the app in one component.\n* By making it difficult or impossible to progressively enhance existing content\n  (ReactJS, Aurelia).\n\nOther shared problems with impact on MPAs:\n\n* Huge library size.\n* Reliance on experimental or slow polyfills.\n* Reliance on XHR imports.\n* Considerable startup time.\n\nIn reality, for the majority of websites clientside routing is either not\nrelevant, or is a bad choice. Most are document-oriented, meaning that from the\nclient\'s perspective, most of the content is static (and it should be accessible\nto visitors without JavaScript). What you actually need is fast loading and fast\nstartup.\n\nWith that in mind, what a modern UI framework actually needs:\n\n* Ability to define custom elements and attributes and include them anywhere\n  in the existing HTML.\n* Small size and fast startup.\n* Make it easy to bundle scripts and views for production.\n\n`atril` negates these problems and ticks all the checkboxes. It\'s extremely\nlight and has unbeatably fast startup. Despite that, it boasts automatic change\ndetection and powerful features like two-way binding.\n</template>\n</sf-article>\n\n<sf-article class="pad">\n  <h1 id="light">\n    <sf-icon svg-icon.="paper-plane-o" class="inline"></sf-icon>\n    Lightweight\n  </h1>\n<template markdown.>\nDespite its power, `atril` is simple at its core. The entire library is 33KB\nminified with dependencies. This includes 14KB of `zone.js`, which comes with\na `Promise` polyfill. The framework has no other ES6 dependencies.\n\nAt the moment, it works in the standards-compliant browsers. Support for IE10\nand IE11 is coming up.\n</template>\n</sf-article>\n');
      templateCache.set('app/doc-sidenav/doc-sidenav.html', '<a href>Overview</a>\n<span>Work in progress. See Overview for details.</span>\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="quickstart/">Quickstart</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="building-blocks/">Building Blocks</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="demo/">Demo</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="component/">Component</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="attribute/">Attribute</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="draft/">Draft</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="change-detection/">Change Detection</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="databinding/">Databinding</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="virtual-dom/">Virtual DOM</a> -->\n<!-- <a disabled sf-tooltip="WIP. See Overview" sf-position="right-top" _href="comparison/"><span><code>atril</code> vs Alternatives</span></a> -->\n');
      templateCache.set('app/hello-world/hello-world.html', '<div class="space-out-v">\n  <!-- Updates automatically -->\n  <h1>Hello, {{name}}!</h1>\n\n  <!-- Two-way databinding -->\n  <label>\n    <input twoway.value="name" placeholder="I\'m two-way bound">\n  </label>\n\n  <!-- One-way databinding and manual update -->\n  <label>\n    <input bind.value="name" on.input="name = this.value" placeholder="I\'m one-way bound">\n  </label>\n</div>\n');
      templateCache.set('app/inner-component/inner-component.html', '<div class="space-out-v" bind.style.color="color" style="background-color: rgba(0, 0, 0, 0.02)">\n  <p>Bound `val` in inner component: {{val}}</p>\n\n  <p>`color` in inner component: {{color}}</p>\n\n  <input twoway.value="color" class="sf-input info">\n</div>\n');
      templateCache.set('app/mock-component/mock-component.html', '<h1>Hello {{value}}!</h1>\n\n<p style="color: {{color}}">If you see \'Hello world\' or some mumbo-jumbo, the values have been successfully interpolated!</p>\n\n<inner-component bind.val="fetched" class="pad-ch"></inner-component>\n\n<div class="pad-ch">\n  <button if.="true" on.click="value = randomString()" class="sf-btn info">click me</button>\n\n  <div class="pad-ch" bind.style.display="\'inline-block\'">\n    <span for.char="value" class="sf-btn success">{{char}}</span>\n  </div>\n</div>\n\n<div class="pad-ch">\n  <input bind.value="inputValue" on.input="inputValue = this.value"\n         class="sf-input" placeholder="write into me">\n  <span>{{inputValue}}</span>\n</div>\n\n<div class="pad-ch">\n  <textarea twoway.value="inputValue"\n            class="sf-input" placeholder="I\'m two way bound"></textarea>\n  <span>{{inputValue}}</span>\n</div>\n\n<div class="pad-ch">\n  <label class="pad-ch" class.info="checked" class.warning="!checked">\n    <input twoway.checked="checked" type="checkbox">\n    <span>I\'m checked: {{checked}}</span>\n  </label>\n</div>\n');
      templateCache.set('app/sf-footer/sf-footer.html', '<sf-footer-body>\n  <div class="flex-1 flex flex-column items-start">\n    <span>\n      {{(new Date()).getFullYear() > 2015 ? \'2015—\' + (new Date()).getFullYear() : \'2015\'}}\n      © <a href="http://mitranim.com" target="_blank">Mitranim</a>\n    </span>\n  </div>\n  <div class="flex-1 flex flex-column items-center">\n    <a class="flex items-center" href="https://github.com/Mitranim/atril" target="_blank">\n      <sf-icon class="github-blue" style="font-size: 2em"></sf-icon>\n      Source at GitHub\n    </a>\n  </div>\n  <div class="flex-1 flex flex-column items-end">\n    <sf-icon class="arrow-up pointer fade" onclick="scrollTo(0, 0)"></sf-icon>\n  </div>\n</sf-footer-body>\n');
      templateCache.set('app/svg/arrows-h.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1920 1024q0 26-19 45l-256 256q-19 19-45 19t-45-19-19-45v-128h-1024v128q0 26-19 45t-45 19-45-19l-256-256q-19-19-19-45t19-45l256-256q19-19 45-19t45 19 19 45v128h1024v-128q0-26 19-45t45-19 45 19l256 256q19 19 19 45z"/></svg>');
      templateCache.set('app/svg/bolt.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1461 694q18 20 7 44l-540 1157q-13 25-42 25-4 0-14-2-17-5-25.5-19t-4.5-30l197-808-406 101q-4 1-12 1-18 0-31-11-18-15-13-39l201-825q4-14 16-23t28-9h328q19 0 32 12.5t13 29.5q0 8-5 18l-171 463 396-98q8-2 12-2 19 0 34 15z"/></svg>');
      templateCache.set('app/svg/cubes.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M512 1760l384-192v-314l-384 164v342zm-64-454l404-173-404-173-404 173zm1088 454l384-192v-314l-384 164v342zm-64-454l404-173-404-173-404 173zm-448-293l384-165v-266l-384 164v267zm-64-379l441-189-441-189-441 189zm1088 518v416q0 36-19 67t-52 47l-448 224q-25 14-57 14t-57-14l-448-224q-5-2-7-4-2 2-7 4l-448 224q-25 14-57 14t-57-14l-448-224q-33-16-52-47t-19-67v-416q0-38 21.5-70t56.5-48l434-186v-400q0-38 21.5-70t56.5-48l448-192q23-10 50-10t50 10l448 192q35 16 56.5 48t21.5 70v400l434 186q36 16 57 48t21 70z"/></svg>');
      templateCache.set('app/svg/exclamation-triangle.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1152 1503v-190q0-14-9.5-23.5t-22.5-9.5h-192q-13 0-22.5 9.5t-9.5 23.5v190q0 14 9.5 23.5t22.5 9.5h192q13 0 22.5-9.5t9.5-23.5zm-2-374l18-459q0-12-10-19-13-11-24-11h-220q-11 0-24 11-10 7-10 21l17 457q0 10 10 16.5t24 6.5h185q14 0 23.5-6.5t10.5-16.5zm-14-934l768 1408q35 63-2 126-17 29-46.5 46t-63.5 17h-1536q-34 0-63.5-17t-46.5-46q-37-63-2-126l768-1408q17-31 47-49t65-18 65 18 47 49z"/></svg>');
      templateCache.set('app/svg/info-circle.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1280 1504v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"/></svg>');
      templateCache.set('app/svg/info.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1344 1472v128q0 26-19 45t-45 19h-512q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h64v-384h-64q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h384q26 0 45 19t19 45v576h64q26 0 45 19t19 45zm-128-1152v192q0 26-19 45t-45 19h-256q-26 0-45-19t-19-45v-192q0-26 19-45t45-19h256q26 0 45 19t19 45z"/></svg>');
      templateCache.set('app/svg/leaf.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1408 832q0-26-19-45t-45-19q-172 0-318 49.5t-259.5 134-235.5 219.5q-19 21-19 45 0 26 19 45t45 19q24 0 45-19 27-24 74-71t67-66q137-124 268.5-176t313.5-52q26 0 45-19t19-45zm512-198q0 95-20 193-46 224-184.5 383t-357.5 268q-214 108-438 108-148 0-286-47-15-5-88-42t-96-37q-16 0-39.5 32t-45 70-52.5 70-60 32q-30 0-51-11t-31-24-27-42q-2-4-6-11t-5.5-10-3-9.5-1.5-13.5q0-35 31-73.5t68-65.5 68-56 31-48q0-4-14-38t-16-44q-9-51-9-104 0-115 43.5-220t119-184.5 170.5-139 204-95.5q55-18 145-25.5t179.5-9 178.5-6 163.5-24 113.5-56.5l29.5-29.5 29.5-28 27-20 36.5-16 43.5-4.5q39 0 70.5 46t47.5 112 24 124 8 96z"/></svg>');
      templateCache.set('app/svg/lightbulb-o.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1248 704q0 13-9.5 22.5t-22.5 9.5-22.5-9.5-9.5-22.5q0-46-54-71t-106-25q-13 0-22.5-9.5t-9.5-22.5 9.5-22.5 22.5-9.5q50 0 99.5 16t87 54 37.5 90zm160 0q0-72-34.5-134t-90-101.5-123-62-136.5-22.5-136.5 22.5-123 62-90 101.5-34.5 134q0 101 68 180 10 11 30.5 33t30.5 33q128 153 141 298h228q13-145 141-298 10-11 30.5-33t30.5-33q68-79 68-180zm128 0q0 155-103 268-45 49-74.5 87t-59.5 95.5-34 107.5q47 28 47 82 0 37-25 64 25 27 25 64 0 52-45 81 13 23 13 47 0 46-31.5 71t-77.5 25q-20 44-60 70t-87 26-87-26-60-70q-46 0-77.5-25t-31.5-71q0-24 13-47-45-29-45-81 0-37 25-64-25-27-25-64 0-54 47-82-4-50-34-107.5t-59.5-95.5-74.5-87q-103-113-103-268 0-99 44.5-184.5t117-142 164-89 186.5-32.5 186.5 32.5 164 89 117 142 44.5 184.5z"/></svg>');
      templateCache.set('app/svg/magic.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1382 709l293-293-107-107-293 293zm447-293q0 27-18 45l-1286 1286q-18 18-45 18t-45-18l-198-198q-18-18-18-45t18-45l1286-1286q18-18 45-18t45 18l198 198q18 18 18 45zm-1351-190l98 30-98 30-30 98-30-98-98-30 98-30 30-98zm350 162l196 60-196 60-60 196-60-196-196-60 196-60 60-196zm930 478l98 30-98 30-30 98-30-98-98-30 98-30 30-98zm-640-640l98 30-98 30-30 98-30-98-98-30 98-30 30-98z"/></svg>');
      templateCache.set('app/svg/paper-plane-o.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1892 139q33 24 27 64l-256 1536q-5 29-32 45-14 8-31 8-11 0-24-5l-527-215-298 327q-18 21-47 21-14 0-23-4-19-7-30-23.5t-11-36.5v-452l-472-193q-37-14-40-55-3-39 32-59l1664-960q35-21 68 2zm-342 1499l221-1323-1434 827 336 137 863-639-478 797z"/></svg>');
      templateCache.set('app/svg/puzzle-piece.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1856 1226q0 81-44.5 135t-123.5 54q-41 0-77.5-17.5t-59-38-56.5-38-71-17.5q-110 0-110 124 0 39 16 115t15 115v5q-22 0-33 1-34 3-97.5 11.5t-115.5 13.5-98 5q-61 0-103-26.5t-42-83.5q0-37 17.5-71t38-56.5 38-59 17.5-77.5q0-79-54-123.5t-135-44.5q-84 0-143 45.5t-59 127.5q0 43 15 83t33.5 64.5 33.5 53 15 50.5q0 45-46 89-37 35-117 35-95 0-245-24-9-2-27.5-4t-27.5-4l-13-2q-1 0-3-1-2 0-2-1v-1024q2 1 17.5 3.5t34 5 21.5 3.5q150 24 245 24 80 0 117-35 46-44 46-89 0-22-15-50.5t-33.5-53-33.5-64.5-15-83q0-82 59-127.5t144-45.5q80 0 134 44.5t54 123.5q0 41-17.5 77.5t-38 59-38 56.5-17.5 71q0 57 42 83.5t103 26.5q64 0 180-15t163-17v2q-1 2-3.5 17.5t-5 34-3.5 21.5q-24 150-24 245 0 80 35 117 44 46 89 46 22 0 50.5-15t53-33.5 64.5-33.5 83-15q82 0 127.5 59t45.5 143z"/></svg>');
      templateCache.set('app/svg/question-circle.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1152 1504v-192q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v192q0 14 9 23t23 9h192q14 0 23-9t9-23zm256-672q0-88-55.5-163t-138.5-116-170-41q-243 0-371 213-15 24 8 42l132 100q7 6 19 6 16 0 25-12 53-68 86-92 34-24 86-24 48 0 85.5 26t37.5 59q0 38-20 61t-68 45q-63 28-115.5 86.5t-52.5 125.5v36q0 14 9 23t23 9h192q14 0 23-9t9-23q0-19 21.5-49.5t54.5-49.5q32-18 49-28.5t46-35 44.5-48 28-60.5 12.5-81zm384 192q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z"/></svg>');
      templateCache.set('app/svg/question.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1216 1384v240q0 16-12 28t-28 12h-240q-16 0-28-12t-12-28v-240q0-16 12-28t28-12h240q16 0 28 12t12 28zm316-600q0 54-15.5 101t-35 76.5-55 59.5-57.5 43.5-61 35.5q-41 23-68.5 65t-27.5 67q0 17-12 32.5t-28 15.5h-240q-15 0-25.5-18.5t-10.5-37.5v-45q0-83 65-156.5t143-108.5q59-27 84-56t25-76q0-42-46.5-74t-107.5-32q-65 0-108 29-35 25-107 115-13 16-31 16-12 0-25-8l-164-125q-13-10-15.5-25t5.5-28q160-266 464-266 80 0 161 31t146 83 106 127.5 41 158.5z"/></svg>');
      templateCache.set('app/svg/sitemap.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M1920 1376v320q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h96v-192h-512v192h96q40 0 68 28t28 68v320q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h96v-192h-512v192h96q40 0 68 28t28 68v320q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h96v-192q0-52 38-90t90-38h512v-192h-96q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h320q40 0 68 28t28 68v320q0 40-28 68t-68 28h-96v192h512q52 0 90 38t38 90v192h96q40 0 68 28t28 68z"/></svg>');
      templateCache.set('app/svg/th.svg', '<svg width="2048" height="2048" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg"><path d="M640 1376v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm-640-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm-640-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68z"/></svg>');
    }
  };
});